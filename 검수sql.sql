   
   -- ID 중복 검수 (연습용)
   -- ID가 하나 이상이면 출력 
    SELECT LINK_ID
	FROM LINK_OLD
	GROUP BY LINK_ID
	HAVING COUNT(*)> 1;

	
	SELECT  NODE_ID
	FROM NODE_OLD
	GROUP BY NODE_ID
	HAVING COUNT(*) > 1;

	--ID 입력 검수(연습용)
	SELECT  LINK_ID
	FROM LINK_OLD
	WHERE LINK_ID LIKE '% %' OR LINK_ID LIKE '%[^-_.0-9]%' OR LEN(LINK_ID) <> 10 

	SELECT NODE_ID
	FROM NODE_OLD
	WHERE NODE_ID LIKE '% %'OR NODE_ID LIKE '%[^-_.0-9]%'OR LEN(NODE_ID) <> 10

	--시작,종료 노드 검수
	--시작, 종료 노드가 적절하게 있는지
	SELECT LINK_ID
	FROM
		(
		SELECT A.LINK_ID, A.F_NODE, B.NODE_ID
		FROM LINK_OLD  A
		LEFT JOIN
			 NODE_OLD B
		ON A.F_NODE = B.NODE_ID
		) AA
	WHERE NODE_ID IS NULL

	SELECT LINK_ID
	FROM
		(
		SELECT A.LINK_ID, A.T_NODE, B.NODE_ID
		FROM LINK_OLD  A
		LEFT JOIN
			 NODE_OLD B
		ON A.T_NODE = B.NODE_ID
		) AA
	WHERE NODE_ID IS NULL

	--노드 링크 관계성 검수 (서울시만 봤을 경우 권역이 달라 발생)
	--노드를 거치는 링크가 없을 경우
	SELECT NODE_ID
	FROM
		(
		SELECT A.NODE_ID, B.FT_NODE
		FROM NODE_OLD  A
		LEFT JOIN 
			(
			SELECT F_NODE FT_NODE FROM LINK_OLD
			UNION ALL 
			SELECT T_NODE FROM LINK_OLD
			)
			B
		ON A.NODE_ID = B.FT_NODE
		) AA
	WHERE FT_NODE IS NULL

	--노드 유형 코드 값 검수
	--도로 유형의 값이 제대로 들어 있는지
	 SELECT NODE_ID  
	 FROM   NODE_OLD
	 WHERE NODE_TYPE NOT IN 
		('101','102','103','104','105','106','108')


    --회전 제한 유무 코드 값 검수
	 SELECT NODE_ID
	 FROM NODE_OLD
	 WHERE TURN_P NOT IN ('0','1')

	--도로 사용 여부 코드 값 검수
	 SELECT  LINK_ID 
	 FROM LINK_OLD
	 WHERE ROAD_USE NOT IN ('0','1')

	--도로 등급 코드 값 검수
	 SELECT  LINK_ID 
	 FROM LINK_OLD
	 WHERE ROAD_RANK NOT IN ('101','102','103','104','105','106','107','108')

	--중용 구간 코드 값 검수
	 SELECT LINK_ID 
	 FROM LINK_OLD
	 WHERE MULTI_LINK NOT IN  ('0','1')


	--연결로 코드 값 검수
	 SELECT LINK_ID
	 FROM LINK_OLD
	 WHERE CONNECT NOT IN  ('000','101','102','103','104','105','106','107','108')

	--통행 제한 차량 코드 값 검수
	 SELECT LINK_ID
	 FROM LINK_OLD
	 WHERE REST_VEH NOT IN  ('0','1','2','3','4','5','6')

	--도로 유형 코드 값 검수
	 SELECT LINK_ID
	 FROM LINK_OLD
	 WHERE ROAD_TYPE NOT IN  ('000','001','002','003','004')

	--도로 등급 관계성 검수
	--000:연결로아님, && CONNECT 값(속성 중 하나)은 ROAD_RANK랑 같아야함
	SELECT LINK_ID FROM LINK_OLD WHERE ROAD_RANK ='101' AND CONNECT NOT IN ('000','101') 
	UNION 
	SELECT  LINK_ID FROM LINK_OLD WHERE ROAD_RANK ='102' AND CONNECT NOT IN ('000','102') 
	UNION 
	SELECT  LINK_ID FROM LINK_OLD WHERE ROAD_RANK ='103' AND CONNECT NOT IN ('000','103') 
	UNION 
	SELECT  LINK_ID FROM LINK_OLD WHERE ROAD_RANK ='104' AND CONNECT NOT IN ('000','104') 
	UNION 
	SELECT  LINK_ID FROM LINK_OLD WHERE ROAD_RANK ='105' AND CONNECT NOT IN ('000','105') 
	UNION 
	SELECT  LINK_ID FROM LINK_OLD WHERE ROAD_RANK ='106' AND CONNECT NOT IN ('000','106') 
	UNION 
	SELECT  LINK_ID FROM LINK_OLD WHERE ROAD_RANK ='107' AND CONNECT NOT IN ('000','107') 
	UNION 
	SELECT  LINK_ID FROM LINK_OLD WHERE ROAD_RANK ='108' AND CONNECT NOT IN ('000','108')


	--권역 코드 관계성 검수
	--올바르지 않은 권역코드
	--링크에 등록된 권역코드 중 실제 권역코드에 해당되지 않은 잘못된 코드들 출력
	SELECT LINK_ID
	FROM LINK_OLD AS A,
		(
		SELECT REGION_CD
		FROM 
			(
			SELECT LEFT(LINK_ID,3) AS REGION_CD 
			FROM LINK_OLD
			GROUP BY LEFT(LINK_ID,3)
			) A
		WHERE REGION_CD NOT IN (SELECT REGION_CD FROM MOCT_SIG_201905)
		) AS B
	WHERE LEFT(A.LINK_ID,3) = B.REGION_CD
	

	--노드 유형 교차로 검수
	SELECT NODE_ID 
	FROM 
		(
		 SELECT NODE_ID 
		 FROM NODE_OLD 
		 WHERE NODE_TYPE = '101'
		) AS A,LINK_OLD AS B
	WHERE A.NODE_ID = B.F_NODE OR A.NODE_ID = B.T_NODE
	GROUP BY NODE_ID
	HAVING COUNT(*) <= 4



	--노드 유형 도로 시종점 검수
	--시종점은 링크가 최대 2개만 연결되어 있어야 함
	SELECT  NODE_ID
	FROM 
		(
		SELECT NODE_ID 
		FROM NODE_OLD 
		WHERE NODE_TYPE = '102'
		) AS A,LINK_OLD AS B
	WHERE A.NODE_ID = B.F_NODE OR A.NODE_ID = B.T_NODE
	GROUP BY NODE_ID
	HAVING COUNT(*) >= 3




	--노드 유형 속성 변화점 검수
	--103번으로 등록된 노드들은 in,out 링크가 2개씩 존재하여야 함. 그 이상(교차로로 표시)이거나 그 이하면 안됨
	SELECT Z1.NODE_ID
	FROM 
		(
		SELECT A.NODE_ID,COUNT(*) AS ALL_CNT
		FROM 
			(
			SELECT NODE_ID 
			FROM NODE_OLD 
			WHERE NODE_TYPE = '103'
			) AS A, LINK_OLD AS B
		WHERE A.NODE_ID = B.F_NODE OR A.NODE_ID = B.T_NODE
		GROUP BY NODE_ID
		) AS Z1 
	LEFT JOIN 
		(
		SELECT A.NODE_ID, COUNT(*) AS IN_LINK_CNT
		FROM 
			(
			SELECT NODE_ID 
			FROM NODE_OLD 
			WHERE NODE_TYPE = '103'
			) AS A,LINK_OLD AS B
		WHERE A.NODE_ID = B.F_NODE
		GROUP BY NODE_ID
		) AS Z2 
		ON Z1.NODE_ID = Z2.NODE_ID
	LEFT JOIN 
		(
		SELECT A.NODE_ID,COUNT(*) AS OUT_LINK_CNT
		FROM 
			(
			 SELECT NODE_ID 
			 FROM NODE_OLD 
			 WHERE NODE_TYPE ='103'
			 ) AS A,LINK_OLD AS B
		WHERE A.NODE_ID = B.T_NODE
		GROUP BY NODE_ID
		) AS Z3 
		ON Z1.NODE_ID = Z3.NODE_ID
	WHERE (IN_LINK_CNT <= 1 AND OUT_LINK_CNT <= 1) OR (IN_LINK_CNT >= 3 AND OUT_LINK_CNT >= 3)


	--노드 유형 도로 시설물 검수
	SELECT Z1.NODE_ID
	FROM 
		(
		SELECT A.NODE_ID,COUNT(*) AS ALL_CNT
		FROM 
			(
			SELECT NODE_ID 
			FROM NODE_OLD
			WHERE NODE_TYPE ='104'
			AND (CK_4_RK NOT IN ('검문소','졸음쉼터','휴게소') AND CK_4_RK NOT LIKE '%톨게이트%'AND NODE_NAME NOT LIKE'%TG%' ) 
			) AS A,LINK_OLD AS B
		WHERE A.NODE_ID = B.F_NODE OR A.NODE_ID = B.T_NODE		  
		GROUP BY NODE_ID
		) AS Z1 
	LEFT JOIN 
		(
		SELECT A.NODE_ID,COUNT(*) AS CONNECT_CNT
		FROM 
			(
			SELECT NODE_ID 
			FROM NODE_OLD
			WHERE NODE_TYPE ='104'
			) AS A,LINK_OLD AS B
		WHERE (A.NODE_ID = B.F_NODE OR A.NODE_ID = B.T_NODE) AND B.ROAD_TYPE ='000'
		GROUP BY NODE_ID
		) AS Z2 
	ON Z1.NODE_ID = Z2.NODE_ID
	WHERE ALL_CNT = CONNECT_CNT


	--노드 유형 행정 경계 검수
	--
	SELECT Y1.NODE_ID
	FROM 
		(
		SELECT NODE_ID 
		FROM 
			(
			SELECT NODE_ID, LEFT(LINK_ID,3) AS REGION_CD
			FROM 
				(
				SELECT NODE_ID 
				FROM  NODE_OLD 
				WHERE NODE_TYPE ='105'
				) AS A,LINK_OLD AS B
			WHERE A.NODE_ID = B.F_NODE OR A.NODE_ID = B.T_NODE
			GROUP BY NODE_ID, LEFT(LINK_ID,3)
			) Z1

		GROUP BY NODE_ID
		HAVING COUNT(*) = 1
		) Y1,	--어떤 링크와 연결되어있는 105번 노드의 id와 해당 링크의 권역코드 추출 후, 노드 id 기준으로 개수가 1개 인 것들의 노드 id 추출 
		(
		SELECT NODE_ID, COUNT(*) AS REF_CNT
		FROM 
			(
			SELECT NODE_ID 
			FROM  NODE_OLD 
			WHERE NODE_TYPE ='105'
			) AS A,LINK_OLD AS B
		WHERE A.NODE_ID = B.F_NODE OR A.NODE_ID = B.T_NODE
		GROUP BY NODE_ID
		) Y2 -- 링크와 연결되어있는 105번 노드 전체 및 개수 추출
	WHERE Y1.NODE_ID = Y2.NODE_ID 
	  AND Y2.REF_CNT > 2 



	--노드 유형 연결로 접속부 검수
	--즉 106번 중에서 연결로가 아닌 것 찾아내기(106번 노드와 연결되있는 링크들 모두 CONNECT가 '000'일 경우)
	SELECT  Z1.NODE_ID
	FROM 
		(
		SELECT A.NODE_ID, COUNT(*) AS ALL_CNT
		FROM 
			(
			SELECT NODE_ID 
			FROM  NODE_OLD 
			WHERE NODE_TYPE ='106'
			) AS A,LINK_OLD AS B
		WHERE A.NODE_ID = B.F_NODE OR A.NODE_ID = B.T_NODE
		GROUP BY NODE_ID
		) AS Z1 -- 노드 type이 106번이고 랑크와 연결되어있는 모든 노드들의 id와 그 개수
	LEFT JOIN 
		(
		SELECT A.NODE_ID,COUNT(*) AS CONNECT_CNT
		FROM 
			(
			SELECT NODE_ID 
			FROM  NODE_OLD 
			WHERE NODE_TYPE ='106'
			) AS A,LINK_OLD AS B
		WHERE (A.NODE_ID = B.F_NODE OR A.NODE_ID = B.T_NODE) AND B.CONNECT ='000'
		GROUP BY NODE_ID
		) AS Z2  --노드타입이 106번인 노드테이블과 전체 링크테이블에서, connect='000'이며 링크와 연결되어있는 노드들의 id와 개수(연결로가 아닌것)
	ON Z1.NODE_ID = Z2.NODE_ID
	WHERE ALL_CNT = CONNECT_CNT



	--노드 유형 IC 및 JC 검수
	--108번 타입의 노드에 연결된 링크들 모두가 CONNECT='000'(연결로아님)인 경우
	SELECT Z1.NODE_ID
	FROM 
		(
		SELECT A.NODE_ID, COUNT(*) AS ALL_CNT
		FROM 
			(
			SELECT NODE_ID 
			FROM  NODE_OLD 
			WHERE NODE_TYPE ='108'
			) AS A,LINK_OLD AS B
		WHERE A.NODE_ID = B.F_NODE OR A.NODE_ID = B.T_NODE
		GROUP BY NODE_ID
		) AS Z1 
	LEFT JOIN 
		(
		SELECT A.NODE_ID, COUNT(*) AS CONNECT_CNT
		FROM 
			(
			SELECT NODE_ID 
			FROM  NODE_OLD 
			WHERE NODE_TYPE ='108'
			) AS A,LINK_OLD AS B
		WHERE (A.NODE_ID = B.F_NODE OR A.NODE_ID = B.T_NODE) AND B.CONNECT <>'000'
		GROUP BY NODE_ID
		) AS Z2 
	ON Z1.NODE_ID = Z2.NODE_ID
	WHERE ALL_CNT = CONNECT_CNT



	--링크 형상 중복 검수
	SELECT LINK_ID
	FROM
		(
		SELECT A.LINK_ID, [dbo].[FN_LINE_TO_MID_GEOM](A.SHAPE) LINK_CEN_PNT,
			B.LINK_ID AS REF_LINK_ID, [dbo].[FN_LINE_TO_MID_GEOM](B.SHAPE) REF_LINK_CEN_PNT,
			C.*
		FROM LINK_OLD A,LINK_OLD B,
			(
			SELECT F_NODE, T_NODE, ROAD_RANK, ROAD_TYPE 
			FROM LINK_OLD
			GROUP BY F_NODE, T_NODE, ROAD_RANK, ROAD_TYPE
			HAVING COUNT(*) > 1 
				AND (MAX(SHAPE.STLength()) - MIN(SHAPE.STLength()) < 50) 
				AND STDEV(SHAPE.STLength()) < 10
			) C
		WHERE A.F_NODE= C.F_NODE AND A.T_NODE= C.T_NODE AND A.ROAD_RANK = C.ROAD_RANK AND A.ROAD_TYPE = C.ROAD_TYPE
			AND B.F_NODE= C.F_NODE AND B.T_NODE= C.T_NODE AND B.ROAD_RANK = C.ROAD_RANK AND B.ROAD_TYPE = C.ROAD_TYPE 
			AND A.LINK_ID <> B.LINK_ID
		) TT
	WHERE LINK_CEN_PNT.STDistance(REF_LINK_CEN_PNT) < 10

	--노드 형상 중복 검수
	--SHAPE.STDistacne 함수 레퍼런스 참고
	SELECT A.NODE_ID
	FROM  NODE_OLD AS A, NODE_OLD AS B
	WHERE LEFT(A.NODE_ID,3) = LEFT(B.NODE_ID,3)
		AND A.NODE_ID <> B.NODE_ID 
		AND A.SHAPE.STDistance(B.SHAPE) <= 2


	--멀티 파트 검수(링크)

	SELECT  LINK_ID
	FROM LINK_OLD
	WHERE SHAPE.STNumGeometries()  > 1


	--시작점 및 시작노드 관계성 검수
	
	SELECT  LINK_ID
	FROM LINK_OLD AS A, NODE_OLD AS B
	WHERE A.F_NODE = B.NODE_ID
	  AND A.SHAPE.STStartPoint().STDistance(B.SHAPE)  > 50

	--종료점 및 종료노드 관계성 검수
	
	SELECT LINK_ID
	FROM LINK_OLD AS A, NODE_OLD AS B
	WHERE A.T_NODE = B.NODE_ID
	  AND A.SHAPE.STEndPoint().STDistance(B.SHAPE)  > 50


	--시군구 매핑 검수(링크 및 노드)
	SELECT  LINK_ID
	FROM 
		(
		SELECT LINK_ID, [dbo].[FN_LINE_TO_MID_GEOM](SHAPE) CEN_SHAPE
		FROM LINK_OLD
		) AS A, MOCT_SIG_201905 AS B
	WHERE LEFT(A.LINK_ID,3) = B.REGION_CD  
		AND A.CEN_SHAPE.STDistance(B.Shape) >= 100


	
	SELECT  NODE_ID
	FROM  NODE_OLDAS A, MOCT_SIG_201905 AS B
	WHERE LEFT(A.NODE_ID,3) = B.REGION_CD  
		AND A.Shape.STDistance(B.Shape) >= 100


	--미분할링크 500M
	INSERT INTO LINK_INTER_SIG
	SELECT AA.LINK_ID, AA.SHAPE, 0
	FROM
	   (
	   SELECT LINK_ID
	   FROM 
		  (
		  SELECT LINK_ID
		  FROM LINK_OLD A, MOCT_SIG_201905 B
		  WHERE A.SHAPE.STIntersects(B.SHAPE) = 1
		  ) AA
	   GROUP BY LINK_ID
	   HAVING COUNT(*) > 1
	   ) BB, LINK_OLD AA
	WHERE AA.LINK_ID = BB.LINK_ID
	
	

